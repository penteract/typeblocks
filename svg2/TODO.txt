What should be the shape of hitboxes?
  currently: the exact shape of the boundary
    this is hard to target precisely
  alternatives: the shape of the bounding box, or the shape without frills
  antiholes with no holes should be treated as part of their parent holes
    possibly antiholes with holes should as well
What should be the point at which hitboxes are tested for dropping?
  currently: the position of the cursor
    For hand-shaped cursors, this is not an obvious point
    The thing being dragged obscures the drop location, making it hard to target precisely
      This compounds the problem above
  alternative: the top left corner of the box being dragged
    This is done by Scratch
  give some indication about where it will be dropped if the mouse is released

//Bugfix: prevent dragging into LHS

//dragging an argument into its (filled) hole should make it floating in the hole
// procedurally generate borders (needs some improvement)

//ctrl-click to copy
//right-click to delete
  Bugfix: delete definitions properly
delete key to delete?
  how do I get deleted arguments back?
  idea: don't allow deleting, just double-click to force an argument into a hole

//double click floating term to fill hole, double click filled term to make it float.
  // (implemented with single clicks)
  sometimes make a hole larger than it needs to be to make it easy to work in that context
  (particularly when using let blocks)

do something to indicate when something will fill a hole (draw border of the hole?)

make types line up better (autofill)
 //(make exact matches fit; think about which holes to count)
 //do something for imperfect matches
 This is a very deep rabbit hole - guessing what the programmer wants is tricky.
   see "Tricky case" comment at the bottom of Actions.js
   e.g. If something matches exactly (including order of arguments), we most likely want it
        (in some cases, this corresponds to eta-reducing away a lambda in Haskell)
        If there is exactly one permutation of arguments which works perfectly, we probably want it
        if the 'works perfectly' above is changed to a recursive "almost perfect up to permuation of arguments",
          do we still want it? Note that this shifts the definition of uniqueness so might actually apply in fewer situations.

let blocks
  (global background should be a let block?)

//global definitions
  //copying from LHS (moving from/within LHS should be impossible until patterns)
    //copying the subject (global scope)
    //copying arguments (scope limited to definition)
  pattern matching
datatype declarations

//pane of known identifiers
  tabs for different modules
  should this include functions or datatypes defined in the current module?
    should it be the only place datatype declarations are visible?
  Don't let the pane interfere so much with dragging terms
  Bugfix: items from the pane get incorrectly wrapped when being copied at certain zoom levels
    (observed at 110%, but only when the window is taller than it is wide?)

//evaluation (single step)
  animated (due to the need to recursively eliminate anonymous variables, this is not straightforward)
  //builtins (integers)
  efficient evaluation
    when expressions would be duplicated, turn them into let blocks
      This should be combined with removing 'simple' (WHNF?) let blocks
        probably involves transformations like: let a = (let b = x in y) in z  --> let b=x in z[y/a]
      I think GHC Core does something with let blocks that might make sense here - let blocks allocate thunks
        I don't think that translating programs to GHC Core would aid understanding

Think about colors
  If a higher-order term occurs in an argument to a copy of itself identical one,
    some anonymous variables become indistinguishable
  Example:
    twice2 :: ((Int->Int)->Int->Int)->(Int->Int)->Int->Int
    twice2 = \ x0v0 x0v1 -> x0v0 (x0v0 x0v1)


zoom/pan
  This is in the SVG1 spec but removed from SVG2 :(

//generate strings corresponding to the terms

show a preview of what happens if you release the mouse (important for UI)
  implementation thoughts: keep track of a "real" target based on the unmodified structure
     when that changes, duplicate as much as needed to (including stuff that would move out of scope)
                        and make the original invisible (but keep it present for hit testing)

hide/shrink parts of more complicated types.
  (only when autofilled? (Î·-reducible))
  stack vertically sometimes?

portability:
  Test in browsers other than firefox
    - I've been deliberately ignoring this
  Touchscreens (incl. phones/tablets
    - These were the original motivation
    - Drag and drop API
    - debugging will be hell
    - voice recognition?

libraries
 - sidebar (with tabs?) to take things from

indicate errors in type parsing (currently an extra ')' causes it to ignore the remainder of the type)

Make things take less space
  Consider leaving the bottom edge of all types flat to save vertical space
    Would need to rethink vertical centering of lines, could look ugly
    reduces the available space for clearly different and/or complicated types
      could make other edges wider to compensate
  see also: zoom/pan

Longer term:
undo/redo
do something with data type declarations
get polymorphic types working
  Frames (aka explicit type signatures)?
  Hindley-Milner doesn't work (particularly when combined with autofill) -
    if you drag a box (x :: a) into the hole of a box (y :: (Bool->Char)->Int ), how do you indicate whether
    you mean (y x) or (y (\z -> x)) (i.e. a=(Bool->Char) or a=Char)?
    There doesn't seem to be a nice way to do this without lots of fiddling
      Part of the problem is that we want to be able to display partially constructed terms nicely
    Rolf's suggestion:
      If there's ambiguity, show previews of the possibilities and offer a choice
  Church encodings (need higher rank types)?
    (see README about pairs)
      Continuing that line of thought, perhaps there is a 3D visualisation in which
      multiple antiholes could be stacked behind each other (they could be thought
      of as being 'in parallel'). This would have the effect of product and sum
      types appearing different depending on whether they're being used or defined
      (assuming adjacent antiholes are stacked along the z direction, but adjacent
      holes are lined up along x, a function which takes a pair would have 2 holes
      next to each other, indicating both need to be filled, while a function
      returning a pair would have the component boxes stacked behind each other).
      This would suffer from the drawback that things don't match the holes they
      fill as closely as they do otherwise.
integrate with Haskell
think about what to do when something changes type
  Make things that don't fit float?
